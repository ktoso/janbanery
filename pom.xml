<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2011 Konrad Malawski <konrad.malawski@project13.pl>
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.sonatype.oss</groupId>
        <artifactId>oss-parent</artifactId>
        <version>7</version>
    </parent>

    <groupId>pl.project13.janbanery</groupId>
    <artifactId>janbanery</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Janbanery - Fluent Kanbanery API Java Wrapper</name>

    <description>
        Kanbanery (https://kanbanery.com) is a simple but powerful Agile project management system,
        to be precise it focuses around the idea of Kanban, a somewhat near idea to SCRUM but with less strict rules.

        The heart of each Kanban flow is the Kanban board, IceBox and Archive - there are all easy accessible via this
        API.

        Janbanery wraps around the RESTful API delivered by Kanbanery while adding some more features like mass
        operations
        or filtering of results. In the end, it's very easy and pleasant to implement your own Kanbanery client be it on
        the desktop, mobile (android) or as for example Gradle / SBT script to take full advantage of kanbanery's
        features.
    </description>
    <url>http://www.project13.pl</url>

    <developers>
        <developer>
            <id>ktoso</id>
            <name>Konrad Malawski</name>
            <email>konrad.malawski@java.pl</email>
            <organization>Project13.pl</organization>
            <url>http://blog.project13.pl</url>
        </developer>
    </developers>

    <prerequisites>
        <maven>[2.2.1.)</maven>
    </prerequisites>

    <licenses>
        <license>
            <name>Apache License 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <scm>
        <url>git@github.com/ktoso/janbanery.git</url>
        <connection>scm:git:https://github.com/ktoso/janbanery</connection>
        <developerConnection>scm:git:git@github.com:ktoso/janbanery.git</developerConnection>
    </scm>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>

    <repositories>
        <repository>
            <id>central</id>
            <name>Maven Central</name>
            <url>http://repo1.maven.org/maven2/</url>
        </repository>
        <repository>
            <id>reflections-repository</id>
            <name>Reflections Maven2 Repository</name>
            <url>http://reflections.googlecode.com/svn/repo</url>
        </repository>
        <repository>
            <id>jgit-repository</id>
            <url>http://download.eclipse.org/jgit/maven</url>
        </repository>
    </repositories>

    <dependencies>
        <!-- async http client -->
        <dependency>
            <groupId>com.ning</groupId>
            <artifactId>async-http-client</artifactId>
            <version>1.6.3</version>
        </dependency>
        <!-- gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>1.7.1</version>
        </dependency>
        <!-- guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>r09</version>
        </dependency>
        <!-- joda time -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>1.6.2</version>
        </dependency>
        <!-- reflections -->
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>0.9.5-RC2</version>
        </dependency>
        <!-- effectively needed when XmlSerializer is used -->
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>1.6</version>
            <!--<scope>runtime</scope>-->
            <!--<optional>true</optional>-->
        </dependency>

        <!-- documentation annotations -->
        <dependency>
            <groupId>pl.project13.sourceisdoc</groupId>
            <artifactId>theSourceIsTheDoc-annotations</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.1</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>0.9.28</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>0.9.28</version>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.easytesting</groupId>
            <artifactId>fest-assert</artifactId>
            <version>1.4</version>
            <scope>test</scope>
        </dependency>
        <!-- mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Setting built-in java compiler properties -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
            <!-- GPG -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-gpg-plugin</artifactId>
                <executions>
                    <execution>
                        <id>sign-artifacts</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>sign</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>